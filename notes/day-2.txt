1. JS Basics - data types, keywords, operators, control flow statements
2. JS array - push, splice,slice, shift, unshift etc. 
					  find, findIndex, filter, map, reduce, sort etc.
3. Hoisting, execution and compilation
4. function execution context and context stack
5. variable object, scope, this property of a FEC
6. new features: 
	- class, constructor, super, extends
	- let and const
	- spread operator
	- object destructuring
	- arrow function
	- promise

7. TypeScript
		- static type checking
		- data typification
		- type inference
		- class data member declaration
		- access specifiers (public, private and protected)
		- interface [as collection of abstract methods and as also as type]
		- generic
		- abstract class
		- custom data type 


Reactive extensions: [reactivex.io]
	- RxJS => [rxjs.dev]

	objects => observable, observer, subject, scheduler
	operators => map, filter etc.
	
Angular Features:
	- components
	- mvvm/mvc model
	- angular modules
	- data binding and event binding
	- separation of concern
	- dependency injection framework
	- built-in routing feature
	- forms data handling
	etc.

assets				type			decorator functions
-----------------------------------------------------------
1. component => 	class			@Component
2. Pipe => 			class			@Pipe
3. Directive => 	class			@Directive

4. Service => 		class			---- [@Injectable]

5. Module => 		class			@NgModule

@angular/core
@angular/common
@angular/forms
@angular/platform-browser
@angular/platform-browser-dynamic


create an angular app:
CLI tool: @angular/cli

install:
>npm i @angular/cli --location=global

uninstallation:
>npm uninstall @angular/cli --location=global


Component
	=> *.component.html
	=> *.component.css
	=> *.component.ts

import {Component} from '@angular/core' 

@Component({
	selector:'app-sample',
	templateUrl:'./*.component.html',
	//template:`<h2>Welcome</h2>`
	styleUrls:['./*.component.css']
})
export class SampleComponent{
}

import {NgModule} from '@angular/core' 
@NgModule({
	//to register - components, directives, pipes
	declarations:[SampleComponent, SampleDirective, SamplePipe],

	//to register - modules (feature modules or built-in modules of angular)
	imports:[FormsModule, YourModule],
	
	//to register service providers
	providers:[SampleService],

	bootstrap:[],
	exports:[]
})
export class SampleModule{
}


binding:
1. data binding: to pass (bind) data from code to view (to an element)
	a. interpolation: {{}}
	b. property binding: <html-element [attribute-name]="data">

2. event binding: to pass (bind) data from view to code

<html-element #variable >
#variable => template reference variable

Passing data between nested and parent component:
a. passing data from parent to nested component
b. passing data from nested to parent component





