https://github.com/joydip-git/siemens-angular-15thMay2024

s/w needed:
Node JS
Visual Studio Code

Node JS versions:
LTS 			Current
20.13.1		22.1.0

JavaScript
TypeScript
Node JS (server side framework)

Angular/React/Vue (client-side library/framework)

Angular is 
	- JS framework
	- SPA 
	- client-side framework

DOM => Document Object Model (HTML)
DOM APIs:
document.getElementById() 
document.body.appendChild(document.createElement('p'))

JavaScript engines:
chrome => V8
safari => JS Core
firefox => Spidermonkey

Node JS is created by Ryan Dahl (2009)

JS execution environments:
1. browser - JS engine
2. Node JS - JS engine

JS:
	object-based, loosely typed programming language

data types:
	string, boolean , number, object , function
	undefined, NaN, Infinity etc.


Angular JS [1.x]

Angular => 2.0 => 17

ECMAScript

transpiler: babel
ES6+ => ES5, 3,2

transpiler: tsc
TS => JS

install package:
a. global => npm i <name> --location=global
path: C:\Users\<user-name>\AppData\Roaming\npm
b. local => npm i <name>
node_modules

for dev dependencis:
old: >npm i <name> --save-dev
new: >npm i <name> -D

for complete dependencis:
old: >npm i <name> --save
new: >npm i <name>


config:
package.json
create:
1. manually
2. npm tool
		> npm init
		> npm init --yes

tsc configuration:
tsconfig.json
create:
a. manually
b. tsc tool: >tsc --init

JS compilation and execution
1. preparation stage
2. execution stage

Function Execution Context object:
A. variable object (vo)
B. scope
C. this

models:
	employee.ts
	employee
		name, id, basic, da, hra
		calculateSalary() => number

	developer.ts
	developer:
		name, id, basic, da, hra, incentive
		calculateSalary() => number

	hr.ts
	hr:
		name, id, basic, da, hra, gratuity
		calculateSalary() => number

data:
	repository.ts
		array of employee objects

manager
	managercontract.ts
	managercontract=>	
	employeemanager.ts
	employeemanager
		- add(e:employee)
		- delete(id:number)
		- update(id:number, e:employee)
		- fetchall()
		- fetch(id:number)

index.ts


create employee objects
save them in the repo
delete an object from repo
update an object in the repo
fetch all objects from repo
fetch a single object from repo


module: api to expose members of one file

module formats:
1. common js [used by Node JS]
	a. to export: module.exports = {prop1:member1,....}
	b. to import: const x = require('...')

2. ES6 module format:
	a. to export: export statement
	b. to import: import statement

3. amd (asynchronous module definition) format
		define(['./utility'],
			function(){
				add(!2,3)
			}
		)
d. umd (universal module definition) format
		require([], function(){})

module loader:
	1. common js module lodaer (used by Node JS)
	2. require js => used for browser. it understands AMD format only
	3. system js



